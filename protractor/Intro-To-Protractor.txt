Key Topics
AngularJS
- Understand basic template concepts (2A-Databinding)
- (Ng-)Model
- & Ng-Repeat
Testing Framework
- Jasmin
- Mocha
Other Helpful Courses
- AngularJS: Get Started - Scott Allen
- AngularJS Fundamentals - Joe Eames
- Testing Client Side JavaScript - Joe Eames - 12.02.2013
- Testing AngularJS from Scratch - Jesse Liberty - 09.07.2014

What is Protractor?
End-to-End					Unit Testing
- Interact with the entire application stack	- Interact with a single, isolated unit at a time
- Focused on what the user experiences		- Focused on the functionality of the code
- Runs in a browser				- Runs in the console

Test Framework for AngularJS Applications
+ Wait for Angular
Example: Bring up new page in Angular & make HTTP-Request out to an API
=> Protractor can monitor that Request & know that Angular will not be ready to display that data untill Request comes back
+ Get elements by bindings
=> Protractor knows that its a binding
+ Get elements by repeaters
=> Protractor can get into Repeaters(ng-repeat), it knows about ng-model & ng-repeat
==================================================================================================================================
Why Use Protractor
Test/Think Like a User
- Actions are rarely stand alone
- A user only has access too what is displayed
=> User sees that data is not displayed, Dev only sees that data in DB has changed
- Systems have many different personas
To improve test efficiency
Develop Feature -> Test Feature -> Integrate Feature -> Test Previous Features(don't break other features) -> Release
Cycle of Tests
- Have to make sure it works
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Happy-Path => Enter all the Right-Data
Weird-Data => Click buttons that should not be clicked yet, we enter a name thats too long, forget to put in zip-code
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- Benefit of the doubt
There might be side effects with another feature (my code breaks others code)
- So many features to test
Overwhelming, because features grow with software

Pain Points
- Repetitive
Keep testing the same feature, we enter a name thats too long, forget to put in zip-code

Protractor
- Doesn't mind repetition
- Always remembers to check everything
- Runs while you're working
===================================================================================================================================
npm install -g protractor	#-g: Install globaly
#Protractor is build upon Selenium
webdriver-manager update
webdriver-manager start
http://127.0.0.1:4444/wd/hub	# Default
====================================================================================================================================
https://github.com/taylonr/intro-to-protractor
Run npm install		#Download nodes needed
Run bower install	#Browser Package Manager (Angular & other JS Lib)
Start MongoDB		#Simple Document Store
Run grunt		#A JS Build Tool, take CSS Files, also have ability to run tests & run nodeserver for us
http://localhost:3000/#!/EventRatings/new
=====================================================================================================================================
Prerequisites
Make sure you have installed all these prerequisites on your development machine.
    Node.js - Download & Install Node.js and the npm package manager, if you encounter any problems, you can also use this Github Gist to install Node.js.
    MongoDB - Download & Install MongoDB, and make sure it's running on the default port (27017). https://www.mongodb.com/download-center
    Bower - You're going to use the Bower Package Manager to manage your front-end packages, in order to install it make sure you've installed Node.js and npm, then install bower globally using npm:
$ npm install -g bower
    Grunt - You're going to use the Grunt Task Runner to automate your development process, in order to install it make sure you've installed Node.js and npm, then install grunt globally using npm:
$ sudo npm install -g grunt-cli
!!!!!!
npm install -g nvmw          # Install nvmw globally
nvmw install 6.5.0        # Install a specific version number
nvmw use 6.5.0            # Use the specific version


npm install jasmine-core --save-dev
E:\IT\intro-to-protractor\
npm install grunt --save-dev
===================================================================================================================================
2-5. Where Protractor Fits in the Testing Spectrum
1) Unit Tests
2) Integration Tests
=> Protractors somewhere between 2+3
3) User Acceptens Tests
Similarities With Integration Tests(2)
+ Nothing is mocked out: Devs take Tools like Jasmin, XUnits, Libraries, 
DEVS go through entire Stack of App and make sure data coming back out of DB is what they expect
+ Not limited to a particular unit
Entire roundtrip API->DB->API
Differences With Integration Tets(2)
+ No Acces To The Database, only able to interact with DB only UI

Similarity With User Tests
+ Interacts with UI
+ Simulates a User (might go back, jump to different page)
+ Tests Workflows (i need to add a new event & provide details to a new event)
Differences With User Tests
+ Different Data (only testing same format strings, but not testing real User Inputs)
=> After Protractor Tests still NEED to do User Tests (No Replacement of User Tests)
===================================================================================================================================
3-1. Locators & Test Suites
Protractor on top of Selenium, it can use own & Selenium Locators
Specific Locators (by.*)
+ by.binding: {{binding-name}}
<div/>{{name}}</div>					=> by.binding('name');
+ by.element:
<input ng-model="name"/>				=> by.model('name');
+ by.css (class):
<div class="primary header">Railroad Days</div>		=> by.css('.primary.header');
#CSS-Selection on JQuery or CSS-Stylesheet: div, firstchild, id
+ by.buttonText:
<button>Save</button>					=> by.buttonText('Save');
+ by.repeater:
<ul>
    <li ng-repeat="u in users">{{u.name}}</li>
</ul>							=> by.repeater('u in users');
+ by.options:
<select ng-options="r for r in roles"></select>		=> by.options('r for r in roles');
+ by.id: 
+ by.linkText: <a>-Element with Text inside it: by.linkText: find Link based on Text of Link
+ by.name: Input-Box of Name-Property of "myinput" => by.name('myinput');
+ by.tagName: HTML-TagName => find all divs, spans, inputboxes
+ by.xPath: traverse down through HTML document, and find 1st, 2nd... element
+ by.addLocator: let you build a CUSTOM LOCATOR specific to your CODE
================================================================================================================================
3.5. Test Suites
Not All Tests Are Created Equal
Areas Tested: Login, Create Event, Finding Event, Updating Event
Types of Test: Smoke Tests (just look quickly Basic Functionality)
Length of Tests: longer then Smoke Tests

Suites in conf.js
suites: {
	suite1: 'path.to.tests',
	suite2: 'path.to.different.tests',
	suite3: 'more.tests',
}

SMOKE TEST:
a group of tests that run pretty quick & hit application at high level 
GOAL: make sure nothing major broken BEFORE dive down into deeper tests (Sanity-Test: is app running well enough to go in to do a deep dive with my tests)
===========================================================================================================================================================
3-6. Using Protractor as Part of a Development Workflow
TDD => Smoke Test => Protractor => QA
Software Development Life Cycle:
Feature Branch => Write Code => *** Write Protractor *** => Merge Develop In => Build/Unit Tests => *** Run Protractor *** => Merge Into Develop 
===========================================================================================================================================================
4-1. Page Objects
Problems with UI Testing (Button Moved, Problem With XY-Koordinaten Testing)
Lots of Repetition
Maintenance Headache (Maintenance easier with Page Objects)
+ Have to find all instances
+ Replace with the new name, selector or other code
+ Lots of time to keep tests in line with refactorings
Broken Test
===========================================================================================================================================================
4-2. Option 1: Manually Updating References (Manual Maintenance)
As your projects grows: 1 change in 1 page is covered by alot of tets: 1. Smoke Tests, 2. Integration Tests, 3. Detailed Tests
===========================================================================================================================================================
4-3. Option 2: Page Objects
Page Object - A plain JS object that encapsulates the properties of an Angular template.

Example Page Object:
var createPage = function(){
	this.name = element(by.model('name'));
}

createPage.name.sendKeys('example');
============================================================================================================================================================
4-4. Page Objects in Actions
============================================================================================================================================================
4-6. Challenges With Automated UI Testing
UI Changes: use LOCATORS to grab element INSTEAD of PagePosition(x,y) OR CSS-Selector to get 1st child
Repetition: 
Easily Break Tests: Did the test break because code broke OR did the developer changed names
OPTION1: Manual Maintenance
+ More work for the tester
+ Reduces confidence in the tests
OPTION 2: Page Objects
+ Easier to maintain
+ DRYer tests
Harness Your Powers
1. Now have a FW to test Like a User
2. Now have a FW to improve Test Efficiency (automated more efficient than manual)
3. Eliminate Repitition

