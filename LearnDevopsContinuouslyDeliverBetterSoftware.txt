!!! WICHTIG: Jeder DEV hat eigene Branch

8. Demo GIT commands and github
#Clone GIT repository in your pwd (present working directory)
git clone https://github.com/edwardviaene/demo.git
git clone https://github.com/Ayebo80/demo.git
#Show README.md
cat README.md
echo 'test 123' > test.txt
# Add file to GIT
git add test.txt
# Commit to GIT (only local on the Clone)
git commit -m "added test.txt"
# Push Commits to Central Repository Server
git push 

#Create a brach "newfeature"
git branch newfeature
# Switch to the branch "newfeature"
git checkout newfeature
# Show on what branch you are working
git branch

echo "new feature" > feature.txt
git add feature.txt
git commit -m "new feature in feature branch"
git push origin newfeature
#github.com: Branch "master" + "newfeature" are now available

#III. Merge feature back into "master"
#Switch to branch "master"
git checkout master
#Merge branch "newfeature" with branch "master"
git merge newfeature
#Push Changes to Central Repository
git push

#IV. GitHub Desktop
Add: Add local repository to github.com
Create: Create a new local repository
Clone: Clone repository from github.com


13. Vagrant
Getting Started
+ Vagrant will come out of the box with support for VirtualBox
!!! You also need VirtualBox installed!!!
+ To get a fresh Ubuntu 14.04 machine running, use following commands:
!!! that will launch a headless VirtualBox instance in background !!!
1. Download Ubuntu image:
vagrant init ubuntu/trusty64
2. Bring headless VirtualBox instance up using Virtualbox
vagrant up --provider virtualbox
+ Now ssh in your newly build machine:
vagrant ssh
+ When finished using it, you can dispose the machine using:
vagrant destroy
+ If you want to shut down machine, but preserve instance data:
vagrant halt
+ Later you can use vagrant up again to launch machine
vagrant up --provider virtualbox

Vagrantfile

Shutting down:
Power of Vagrant: You only have to distribute a very small vagrant project within your team to all work on same provision machines.

------------------------------------------------------------------------------
15. Vagrant demo
# Install Vagrant+Virtualbox on Linux, Windows or MacOS:
https://www.vagrantup.com/downloads.html
https://www.virtualbox.org/wiki/Downloads
mkdir vagrantProject
cd vagrantProject
#Install Ubuntu-Trusty64 & place a Vagrantfile in this directory
vagrant init ubuntu/trusty64
# download ubuntu/trusty64 basebox & guest additions
vagrant up
# now the vagrant box is ready log into it
vagrant ssh
# exit bash shell of vagrant
exit
# shutdown machine, do NOT removes Vagrantfile & NOT remove box files
vagrant halt
# shutdown machine, do NOT removes Vagrantfile & do remove box files
vagrant destroy

# open/edit Vagrantfile
notepad Vagrantfile 	#Windows
vim Vagrantfile		#Linux
# Set OS on Box
config.vm.box = "ubuntu/trusty64"
# Forward the port (guest port 80 will be available on host port 8080)
config.vm.network "forwarded_port", guest(vagrant box):80, host(physical computer): 8080
# Provision Apache2 Webserver
config.vm.provision "shell", inline: <<-SHELL
   sudo apt-get update
   sudo apt-get install -y apache2
SHELL

# build ubuntu/trusty64 box with forwarded_port & Apache2 installed
vagrant up
# See if Apache2 is successfully installed
# on host(physical computer):
curl localhost:8080
ODER im WebBrowser: localhost:8080
# on guest(vagrant box):
curl localhost:80
ODER im WebBrowser: localhost:80

# SUSPEND (=SAVE STATE) of vagrant box
vagrant suspend
------------------------------------------------------------------------------
16. Introduction to Automation and Configuration Management

chef-clients periodically check chef-server if there are any changes (default: every 30 minutes)
if you dont want to use a server use chef-solo
states of chef-clients are saved in chef-server

you execute ansible and it pushes all the changes to the ansible-nodes
Ansible Tower: can keep state of nodes, but is optional & you have to pay
			Ansible: 	Chef:
Programming Language: 	Python		Ruby
Configuration Files:	YAML		ERB & JSON
--------------------------------------------------------------------------------
18. Ansible Installation
I) Installing Ansible machine
+ Spin up two ubuntu machines (1 will be the Ansible machine itself, 1 will be host with WebServer installed)
+ Create an empty directory somewhere on your system
+ Create an empty Vagrantfile with an editor and put the following in it:
Vagrant.configure(2) do |config|
  config.vm.define "webserver" do |webserver|
    webserver.vm.box = "ubuntu/trusty64"
    webserver.vm.network "private_network", ip: "192.168.0.2"
    webserver.vm.hostname = "webserver"
  end
  config.vm.define "ansible" do |ansible|
    ansible.vm.box = "ubuntu/trusty64"
    ansible.vm.network "private_network", ip: "192.168.0.254"
    ansible.vm.hostname = "ansible"
  end
end
+ You can now spin up the machines using
vagrant up ansible
vagrant up webserver
+ Log to the ansible machine in and install ansible using apt
vagrant ssh ansible
sudo apt-get install ansible
+ Generate a new key pair on the Ansible machine
ssh-keygen	#Empty for No passphrase
+ private key: /home/vagrant/.ssh/id_rsa (for Ansible machine)
+ public key: /home/vagrant/.ssh/id_rsa.pub (to copy to .ssh/authorized_keys on hosts)
III) Setup host
+ Copy the contents of /home/vagrant/.ssh/id_rsa.pub into the clipboard
+ Open a new terminal (or cmd) and ssh into our to be webserver:
vagrant ssh webserver
sudo -s
echo 'full contents of id_rs.pub' > /root/.ssh/authorized_keys
OR:
TODO Copy-Befehl von SSH-Public-Key
TODO
TODO

IV) Setup Ansible inventory
+ To set up the inventory file, we can execute the following commands:
vagrant ssh ansible
vagrant@ansible: echo '[webservers]' > /etc/ansible/hosts
vagrant@ansible: echo '192.168.0.2' >> /etc/ansible/hosts
+ Our inventory file will now look like:
[webservers]
192.168.0.2
+ We added the IP address of our webserver to the group "webservers" in the inventory file
+ In ansible we can define multiple IP addresses or hosts under one group
+ ssh-agent sends our id_rsa key automatically, so we don't have to put it as an argument
ssh-agent bash
ssh-add /home/vagrant/.ssh/id_rsa
# You will need to execute this everytime you add a new login/session
# OR add to .profile (execute on every login/session)
+ ansible ping all tests whether all our hosts in our inventory file are reachable
ansible -i /etc/ansible/hosts -u root -m ping all
-------------------------------------------------------------------------------------------------------------------------------------
19. Ansible Installation DEMO
Edwards-MBP: mkdir ansible
Edwards-MBP: cd ansible
ODER: cd /etc/ansible
Edwards-MBP: git clone https://github.com/wardviaene/ansible-demo.git
Edwards-MBP: mv ansible-demo/misc/Vagrantfile .
# Windows CMD: copy ansible-demo\misc\Vagrantfile .
Edwards-MBP: cat Vagrantfile
Edwards-MBP: vagrant up webserver
Edwards-MBP: vagrant up ansible
Edwards-MBP: vagrant ssh ansible
vagrant@ansible: sudo apt-get install ansible
vagrant@ansible: ssh-keygen	#NO Passphrase, Save Key to /home/vagrant/.ssh/id_rsa
vagrant@ansible: cat .ssh/id_rsa.pub	#Copy to clipboard
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFp0hHzg15ZUffItGLQQlyb4OMleBZ1kA/QID3VH5EefyvGFy9Ul2uTLBUEbH/kGhc+uQj9GHxvzZFoMCQTzGg0rTFIxf6AoJ7w4xP6mEyI3gT2XPfG+c4sYwL/te8v0EaHt4odVFGT4YSnYRYZ1B+EhaaPrtdqVxEfQ2CEs5wYPIOfWaVWueBBMv/BXtNWy++XEPiL1r2ih+t2FYGccdx8IHP2weRx1bHb5vACk/fqXePjziJIzHnTORzxyYaZJNnteofRHvdKnUvnDrva5vK95Rt6fEw/0lqLJyUDB3Utjn0Q0Y4kJRyUYUaUvUgulM3MZYhjqds7we7E3ufUsK5 vagrant@ansible

vagrant@ansible: exit
# ssh into webserver box
Edward-MBP: vagrant ssh webserver
vagrant@webserver: sudo -s
root@webserver: echo '<Copy to clipboard>' > /root/.ssh/authorized_keys
vagrant@webserver: exit
vagrant@webserver: exit
# Back to ansible box
Edward-MBP: vagrant ssh ansible
vagrant@ansible: echo '[webservers]' > hosts
vagrant@ansible: echo '192.168.0.2' >> hosts
vagrant@ansible: ssh-agent bash
vagrant@ansible: ssh-add .ssh/id_rsa
vagrant@ansible: ansible -i hosts -u root -m ping all
--------------------------------------------------------------------------------------------------------------------------------------
20. Ansible First Playbook
I) Setup Ansible playbook
+ Example nginx playbook
	+ Only installs nginxs, no configuration
+ Contents of nginx.yml:
II) Run Ansible playbook
+ Example nginx playbook (just install nginx, no configuration)
vagrant@ansible: ansible-playbook -i hosts -u root nginx.yml
# -i: hosts-file, -u: User
III) Edit configuration
+ Add templates/nginx.conf.j2
# All variables in {{}} will be replaces by variables defined in playbook
# When you execute a Ansible playbook you need: 1. yml-file 2. all template files(.j2) it depends on
+ Modify nginx.yml
------------------------------------------------------------------------------------------------------------
21. Ansible First Playbook DEMO
vagrant@ansible: cp /vagrant/ansible-demo/ .
vagrant@ansible: cp /vagrant/ansible-demo/nginx.xml .
vagrant@ansible: cp -r /vagrant/ansible-demo/templates/ .
vagrant@ansible: cat nginx.yml
vagrant@ansible: cat templates/nginx.conf.j2
vagrant@ansible: ansible-playbook -i hosts -u root nginx.yml
vagrant@ansible: curl http://192.168.0.2	#Sends HTTP-Request
------------------------------------------------------------------------------------------------------------
22. Ansible Provisioning with vagrant and EC2
I) Vagrant Provisioning with Ansible
+ It is also possible to run ansible as part of vagrant provisioning
+ Configuration changes to Vagrantfile:
=> Add for vm "webserver" before end:
ansible.playbook = "nginx.yml"
II) AWS Provisioning with ansible
+ Install the boto library and awscli
vagrant@ansible: sudo apt-get update && sudo apt-get install python-pip
vagrant@ansible: sudo pip install boto awscli
+ You will need an Amazon AWS account (http://aws.amazon.com)
+ When starting a new one, you can launch a ec2 micro server for free in the first year (free tier usage)
III) Ansible playbook with boto
+ Create a new IAM user in Amazon AWS
+ Configure credentials in ~/.aws/credentials
+ Import ssh keypair
vagrant@ansible: aws ec2 import-key-pair --key-name ansible --public-key-material file://~/.ssh/id_rsa.pub
{
   "KeyName": "ansible",
   "KeyFingerprint": "88:5b:95:a0:5b:49:51:18:84:5c:30:e1:f1:25:8a:86"
}
+ Create a new playbook ec2.yml to provision a new server:

- name: Create a new instance
# executed on localhost(our ansible-server) & do NOT need to gather facts
  hosts: localhost
  connection: local
  gather_facts: False
# declare all variables we need for provisioning process
# t2.micro smalles instance availabel on EW2
# security_group: contains firewall settings, i configured earlier on EWS
# image: publicly available ubuntu image
# region: eu-west-1 = IRELAND
# subnet: EWS automatically creates a subnet for you, COPY FROM EWS Account Settings
  vars:
    keypair: ansible
    instance_type: t2.micro
    security_group: sg-ba9a5ede
    image: ami-f95ef58a
    region: eu-west-1
    subnet: subnet-7a522c0d
    groupname: webservers
  tasks:
# Task1: Launch instance, use ec2 module to connect to EWS API & launch instance
    - name: Launch instance
      ec2:
         key_name: "{{ keypair }}"
         group_id: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
         image: "{{ image }}"
         wait: true
         region: "{{ region }}"
         vpc_subnet_id: "{{ subnet }}"
         assign_public_ip: yes
      register: ec2
# Task2:
    - name: Add new instance to host group
      add_host: hostname={{ item.public_ip }} groupname={{ groupname }}
      with_items: "{{ ec2.instances }}"
# Task3: SSH come up can take couples of minutes
    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: "{{ ec2.instances }}"
- name: configure new instance
  hosts: webservers
  sudo: yes 
  remote_user: ubuntu 
  gather_facts: True
# Once SSH up it will run Ansible YML Playbook
- include: nginx-ec2.yml

+ nginx-ec2.yml modifications of nginx.yml
+ AWS ubuntu image doesn't allow root login (ADD: sudo: yes & remote_user: ubuntu)
+ .ssh/authorized_keys gets installed in the home of the ubuntu user
#Ansible will use ubuntu user to login to SSH & use sudo to gather information
II) Maintaining inventory
+ It's NOT recommended using a static inventory file when using cloud providers like AWS
+ Better is to pass a script to ansible to build the inventory dynamically
+ ansible-playbook -i ec2.py will build the inventory dynamically
	+ The script will access the AWS API to gather the IP addresses
+ ec2.py can be found on the ansible website or in my GIT repository with all ansible playbook used in this course
----------------------------------------------------------------------------------------------------------------------
22. Ansible Provisioning with EC2 demo
1) Create a Group
Ayebo80 => My Security Credentials => Groups => Create New Group: Set Group Name: ansible
2) Create a new User:
Ayebo80 => My Security Credentials => Users => Create New User: Enter User Name: ansible
Check "Access type Programmatic access", so i can acces my ansible User using the API
Next: Permissions
??? TODO: Show User Security Credentials	TODO ???
Check Group "ansible"
Next: Review
Create User

vagrant@ansible:~$ sudo apt-get update && sudo apt-get install python-pip
vagrant@ansible:~$ sudo pip install boto awscli
#boto: Library necessary to connect to AWS 	awscli: AWS Command Line Utility
vagrant@ansible:~$ aws configure
AWS Access Key ID: AKIAJFC56B3ITZYMECFA
AWS Secret Access: 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
Default region name: eu-central-1
Default output format: <ENTER>
# Created 2 files:
vagrant@ansible:~$ vim .aws/config
vagrant@ansible:~$ vim .aws/credentials
vagrant@ansible:~$ aws ec2 import-key-pair --key-name ansible --public-key-material file://~/.ssh/id_rsa.pub
vagrant@ansible:~$ cp /vagrant/ .
vagrant@ansible:~$ cp /vagrant/ansible-demo/ec2.yml .
vagrant@ansible:~$ cp /vagrant/ansible-demo/nginx-ec2.yml .
vagrant@ansible:~$ cat ec2.yml				# ansible playbook contains nginx-ec2.yml
vagrant@ansible:~$ cat nginx-ec2.yml			# included ansible playbook

III) Find subnet ID & Security Group:
Networking => VPC => Subnets => 
Copy & Paste Subnet ID to Ansible Playbook: subnet-d7a904bc

Networking => VPC => Security Groups => Tab "Inbound Rules" => Edit:
Type		Protocol	Port Range	Source
ALL Traffic	ALL	ALL		<IP-Address, z.B. 137.250.200.0/21>
Save=> 
Copy & Paste Group ID to Ansible Playbook: sg-a8bf3cc2

IV) Find AMI-ID (type 'hvm' for instance of type 't2.micro') from https://cloud-images.ubuntu.com/locator/es2/
ami-97e953f8

IV) 
vagrant@ansible:~$ vim hosts-ec2
[localhost]
127.0.0.1
vagrant@ansible:~$ ansible-playbook -i hosts ec2.yml
#Instance is launched, trying to see if SSH connection is up. Once SSH connection is up, launch ansible playbook
vagrant@ansible:~$ curl 52.31.103.132

VI) Terminate Instances: "Instance creation failed => InstanceLimitExceeded: You have requested more instances (11) than your current instance limit of 10 allows for the specified instance type.
Instances => Terminate

